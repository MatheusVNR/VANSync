{"ast":null,"code":"import api from './api';\nimport { mockAuthService } from './mock.service';\n\n// Use o mock em ambiente de desenvolvimento ou se não houver API configurada\nconst useMock = true;\nexport const authService = useMock ? mockAuthService : {\n  async login(email, password) {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n};","map":{"version":3,"names":["api","mockAuthService","useMock","authService","login","email","password","response","post","data","token","localStorage","setItem","JSON","stringify","user","logout","removeItem","getCurrentUser","getItem","parse","isAuthenticated"],"sources":["C:/Users/carlos.assuncao/tecno_react/src/services/auth.service.ts"],"sourcesContent":["import api from './api';\r\nimport { mockAuthService, AuthService, User } from './mock.service';\r\n\r\n// Use o mock em ambiente de desenvolvimento ou se não houver API configurada\r\nconst useMock = true;\r\n\r\nexport const authService: AuthService = useMock ? mockAuthService : {\r\n  async login(email: string, password: string): Promise<{ user: User; token: string }> {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n    }\r\n    return response.data;\r\n  },\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser(): User | null {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,SAASC,eAAe,QAA2B,gBAAgB;;AAEnE;AACA,MAAMC,OAAO,GAAG,IAAI;AAEpB,OAAO,MAAMC,WAAwB,GAAGD,OAAO,GAAGD,eAAe,GAAG;EAClE,MAAMG,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAA0C;IACnF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IAClE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDO,MAAMA,CAAA,EAAS;IACbL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAcA,CAAA,EAAgB;IAC5B,MAAMH,IAAI,GAAGJ,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOJ,IAAI,GAAGF,IAAI,CAACO,KAAK,CAACL,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDM,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAACV,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}