{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/api';\n\n// Tipo para erros da API\n\n// Configuração do cliente axios\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Serviço de API\nexport const apiService = {\n  // Método para enviar os dados do formulário\n  async submitForm(data) {\n    try {\n      const response = await apiClient.post('/form/submit', data);\n      return response.data;\n    } catch (error) {\n      var _axiosError$response, _axiosError$response$;\n      console.error('Erro ao enviar formulário:', error);\n      const axiosError = error;\n      return {\n        success: false,\n        message: ((_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || 'Erro ao enviar formulário'\n      };\n    }\n  },\n  // Método para obter o URL do PDF\n  getPdfUrl(ticketNumber) {\n    return `${API_URL}/form/pdf/${ticketNumber.replace('#', '')}`;\n  },\n  // Método para baixar o PDF\n  async downloadPdf(ticketNumber) {\n    try {\n      const response = await apiClient.get(`/form/pdf/${ticketNumber.replace('#', '')}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao baixar PDF:', error);\n      throw new Error('Não foi possível baixar o PDF');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","apiService","submitForm","data","response","post","error","_axiosError$response","_axiosError$response$","console","axiosError","success","message","getPdfUrl","ticketNumber","replace","downloadPdf","get","responseType","Error"],"sources":["D:/tecno_react/src/services/api.service.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\nexport interface CompanyData {\r\n  cnpj: string;\r\n  razaoSocial: string;\r\n  responsavelNome: string;\r\n  responsavelCargo: string;\r\n  responsavelTelefone: string;\r\n  responsavelEmail: string;\r\n  banco: string;\r\n  agencia: string;\r\n  conta: string;\r\n  convenio: string;\r\n  gerenteConta: string;\r\n  gerenteTelefone: string;\r\n  gerenteEmail: string;\r\n}\r\n\r\nexport interface ApiResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data?: any;\r\n  ticketNumber?: string;\r\n  pdfUrl?: string;\r\n}\r\n\r\n// Tipo para erros da API\r\ninterface ApiError {\r\n  message: string;\r\n}\r\n\r\n// Configuração do cliente axios\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\n// Serviço de API\r\nexport const apiService = {\r\n  // Método para enviar os dados do formulário\r\n  async submitForm(data: CompanyData): Promise<ApiResponse> {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse>('/form/submit', data);\r\n      return response.data;\r\n    } catch (error: unknown) {\r\n      console.error('Erro ao enviar formulário:', error);\r\n      const axiosError = error as AxiosError<ApiError>;\r\n      return {\r\n        success: false,\r\n        message: axiosError.response?.data?.message || 'Erro ao enviar formulário',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Método para obter o URL do PDF\r\n  getPdfUrl(ticketNumber: string): string {\r\n    return `${API_URL}/form/pdf/${ticketNumber.replace('#', '')}`;\r\n  },\r\n\r\n  // Método para baixar o PDF\r\n  async downloadPdf(ticketNumber: string): Promise<Blob> {\r\n    try {\r\n      const response = await apiClient.get(`/form/pdf/${ticketNumber.replace('#', '')}`, {\r\n        responseType: 'blob',\r\n      });\r\n      return response.data;\r\n    } catch (error: unknown) {\r\n      console.error('Erro ao baixar PDF:', error);\r\n      throw new Error('Não foi possível baixar o PDF');\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAsB,OAAO;AAEzC,MAAMC,OAAO,GAAG,2BAA2B;;AA0B3C;;AAKA;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB;EACA,MAAMC,UAAUA,CAACC,IAAiB,EAAwB;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,IAAI,CAAc,cAAc,EAAEF,IAAI,CAAC;MACxE,OAAOC,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAc,EAAE;MAAA,IAAAC,oBAAA,EAAAC,qBAAA;MACvBC,OAAO,CAACH,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMI,UAAU,GAAGJ,KAA6B;MAChD,OAAO;QACLK,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,EAAAL,oBAAA,GAAAG,UAAU,CAACN,QAAQ,cAAAG,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBJ,IAAI,cAAAK,qBAAA,uBAAzBA,qBAAA,CAA2BI,OAAO,KAAI;MACjD,CAAC;IACH;EACF,CAAC;EAED;EACAC,SAASA,CAACC,YAAoB,EAAU;IACtC,OAAO,GAAGlB,OAAO,aAAakB,YAAY,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;EAC/D,CAAC;EAED;EACA,MAAMC,WAAWA,CAACF,YAAoB,EAAiB;IACrD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMP,SAAS,CAACoB,GAAG,CAAC,aAAaH,YAAY,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QACjFG,YAAY,EAAE;MAChB,CAAC,CAAC;MACF,OAAOd,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAc,EAAE;MACvBG,OAAO,CAACH,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIa,KAAK,CAAC,+BAA+B,CAAC;IAClD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}