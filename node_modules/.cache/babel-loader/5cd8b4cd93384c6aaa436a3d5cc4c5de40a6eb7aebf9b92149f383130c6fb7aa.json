{"ast":null,"code":"// Este arquivo simula as respostas do backend para testes do frontend\n\n// Mock do usuário autenticado\nconst mockUser = {\n  id: 1,\n  name: 'Usuário Teste',\n  email: 'teste@tecnospeed.com.br'\n};\n\n// Mock do token JWT\nconst mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n\n// Mock de bancos\nconst mockBanks = [{\n  id: '001',\n  code: '001',\n  name: 'Banco do Brasil'\n}, {\n  id: '341',\n  code: '341',\n  name: 'Itaú'\n}, {\n  id: '033',\n  code: '033',\n  name: 'Santander'\n}, {\n  id: '237',\n  code: '237',\n  name: 'Bradesco'\n}];\n\n// Mock das cartas VAN\nconst mockLetters = [];\n\n// Substitui as chamadas à API por funções mock\nexport const mockAuthService = {\n  login: async (email, password) => {\n    // Simula validação de credenciais\n    if (email === 'teste@tecnospeed.com.br' && password === '123456') {\n      localStorage.setItem('token', mockToken);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      return {\n        user: mockUser,\n        token: mockToken\n      };\n    } else {\n      throw {\n        response: {\n          data: {\n            message: 'Credenciais inválidas'\n          }\n        }\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport const mockBankService = {\n  getBanks: async () => {\n    return mockBanks;\n  },\n  getBankById: async id => {\n    return mockBanks.find(bank => bank.id === id);\n  },\n  getBankProducts: async () => {\n    return [{\n      id: 'boletos',\n      name: 'Boletos',\n      description: 'Trafegar arquivos de remessa e retorno de boletos'\n    }, {\n      id: 'pagamentos',\n      name: 'Pagamentos',\n      description: 'Trafegar arquivos de remessa e retorno de pagamentos'\n    }, {\n      id: 'extrato',\n      name: 'Extrato',\n      description: 'Trafegar arquivos de extrato'\n    }, {\n      id: 'dda',\n      name: 'DDA',\n      description: 'Trafegar arquivos de remessa de débitos'\n    }];\n  }\n};\nexport const mockVanService = {\n  createVanLetter: async data => {\n    const newLetter = {\n      id: Date.now().toString(),\n      ...data,\n      status: 'created',\n      createdAt: new Date().toISOString()\n    };\n    mockLetters.push(newLetter);\n    return newLetter;\n  },\n  getVanLetterById: async id => {\n    return mockLetters.find(letter => letter.id === id);\n  },\n  updateVanLetter: async (id, data) => {\n    const letterIndex = mockLetters.findIndex(letter => letter.id === id);\n    if (letterIndex !== -1) {\n      mockLetters[letterIndex] = {\n        ...mockLetters[letterIndex],\n        ...data\n      };\n      return mockLetters[letterIndex];\n    }\n    throw new Error('Carta não encontrada');\n  },\n  getVanLettersByUser: async () => {\n    return mockLetters;\n  },\n  generateVanLetterPDF: async () => {\n    return new Blob(['PDF simulado da carta VAN'], {\n      type: 'application/pdf'\n    });\n  }\n};","map":{"version":3,"names":["mockUser","id","name","email","mockToken","mockBanks","code","mockLetters","mockAuthService","login","password","localStorage","setItem","JSON","stringify","user","token","response","data","message","logout","removeItem","getCurrentUser","getItem","parse","isAuthenticated","mockBankService","getBanks","getBankById","find","bank","getBankProducts","description","mockVanService","createVanLetter","newLetter","Date","now","toString","status","createdAt","toISOString","push","getVanLetterById","letter","updateVanLetter","letterIndex","findIndex","Error","getVanLettersByUser","generateVanLetterPDF","Blob","type"],"sources":["C:/Users/carlos.assuncao/tecno_react/src/services/mock.service.js"],"sourcesContent":["// Este arquivo simula as respostas do backend para testes do frontend\r\n\r\n// Mock do usuário autenticado\r\nconst mockUser = {\r\n  id: 1,\r\n  name: 'Usuário Teste',\r\n  email: 'teste@tecnospeed.com.br',\r\n};\r\n\r\n// Mock do token JWT\r\nconst mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\r\n\r\n// Mock de bancos\r\nconst mockBanks = [\r\n  { id: '001', code: '001', name: 'Banco do Brasil' },\r\n  { id: '341', code: '341', name: 'Itaú' },\r\n  { id: '033', code: '033', name: 'Santander' },\r\n  { id: '237', code: '237', name: 'Bradesco' },\r\n];\r\n\r\n// Mock das cartas VAN\r\nconst mockLetters = [];\r\n\r\n// Substitui as chamadas à API por funções mock\r\nexport const mockAuthService = {\r\n  login: async (email, password) => {\r\n    // Simula validação de credenciais\r\n    if (email === 'teste@tecnospeed.com.br' && password === '123456') {\r\n      localStorage.setItem('token', mockToken);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n      return { user: mockUser, token: mockToken };\r\n    } else {\r\n      throw { response: { data: { message: 'Credenciais inválidas' } } };\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n};\r\n\r\nexport const mockBankService = {\r\n  getBanks: async () => {\r\n    return mockBanks;\r\n  },\r\n  getBankById: async (id) => {\r\n    return mockBanks.find(bank => bank.id === id);\r\n  },\r\n  getBankProducts: async () => {\r\n    return [\r\n      {\r\n        id: 'boletos',\r\n        name: 'Boletos',\r\n        description: 'Trafegar arquivos de remessa e retorno de boletos',\r\n      },\r\n      {\r\n        id: 'pagamentos',\r\n        name: 'Pagamentos',\r\n        description: 'Trafegar arquivos de remessa e retorno de pagamentos',\r\n      },\r\n      {\r\n        id: 'extrato',\r\n        name: 'Extrato',\r\n        description: 'Trafegar arquivos de extrato',\r\n      },\r\n      {\r\n        id: 'dda',\r\n        name: 'DDA',\r\n        description: 'Trafegar arquivos de remessa de débitos',\r\n      },\r\n    ];\r\n  },\r\n};\r\n\r\nexport const mockVanService = {\r\n  createVanLetter: async (data) => {\r\n    const newLetter = {\r\n      id: Date.now().toString(),\r\n      ...data,\r\n      status: 'created',\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    mockLetters.push(newLetter);\r\n    return newLetter;\r\n  },\r\n  getVanLetterById: async (id) => {\r\n    return mockLetters.find(letter => letter.id === id);\r\n  },\r\n  updateVanLetter: async (id, data) => {\r\n    const letterIndex = mockLetters.findIndex(letter => letter.id === id);\r\n    if (letterIndex !== -1) {\r\n      mockLetters[letterIndex] = { ...mockLetters[letterIndex], ...data };\r\n      return mockLetters[letterIndex];\r\n    }\r\n    throw new Error('Carta não encontrada');\r\n  },\r\n  getVanLettersByUser: async () => {\r\n    return mockLetters;\r\n  },\r\n  generateVanLetterPDF: async () => {\r\n    return new Blob(['PDF simulado da carta VAN'], { type: 'application/pdf' });\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}