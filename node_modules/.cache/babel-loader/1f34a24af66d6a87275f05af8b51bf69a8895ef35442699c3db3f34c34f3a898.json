{"ast":null,"code":"import _objectSpread from\"C:/Users/carlos.assuncao/tecno_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Este arquivo simula as respostas do backend para testes do frontend\n// Mock do usuário autenticado\nconst mockUser={id:1,name:'Usuário Teste',email:'teste@tecnospeed.com.br'};// Mock do token JWT\nconst mockToken='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';// Mock de bancos\nconst mockBanks=[{id:'001',code:'001',name:'Banco do Brasil'},{id:'341',code:'341',name:'Itaú'},{id:'033',code:'033',name:'Santander'},{id:'237',code:'237',name:'Bradesco'}];// Mock das cartas VAN\nconst mockLetters=[];// Substitui as chamadas à API por funções mock\nexport const mockAuthService={login:async(email,password)=>{// Simula validação de credenciais\nif(email==='teste@tecnospeed.com.br'&&password==='123456'){localStorage.setItem('token',mockToken);localStorage.setItem('user',JSON.stringify(mockUser));return{user:mockUser,token:mockToken};}else{throw{response:{data:{message:'Credenciais inválidas'}}};}},logout:()=>{localStorage.removeItem('token');localStorage.removeItem('user');},getCurrentUser:()=>{const user=localStorage.getItem('user');return user?JSON.parse(user):null;},isAuthenticated:()=>{return!!localStorage.getItem('token');}};export const mockBankService={getBanks:async()=>{return mockBanks;},getBankById:async id=>{return mockBanks.find(bank=>bank.id===id);},getBankProducts:async()=>{return[{id:'boletos',name:'Boletos',description:'Trafegar arquivos de remessa e retorno de boletos'},{id:'pagamentos',name:'Pagamentos',description:'Trafegar arquivos de remessa e retorno de pagamentos'},{id:'extrato',name:'Extrato',description:'Trafegar arquivos de extrato'},{id:'dda',name:'DDA',description:'Trafegar arquivos de remessa de débitos'}];}};export const mockVanService={createVanLetter:async data=>{const newLetter=_objectSpread(_objectSpread({id:Date.now().toString()},data),{},{status:'created',createdAt:new Date().toISOString()});mockLetters.push(newLetter);return newLetter;},getVanLetterById:async id=>{return mockLetters.find(letter=>letter.id===id);},updateVanLetter:async(id,data)=>{const letterIndex=mockLetters.findIndex(letter=>letter.id===id);if(letterIndex!==-1){mockLetters[letterIndex]=_objectSpread(_objectSpread({},mockLetters[letterIndex]),data);return mockLetters[letterIndex];}throw new Error('Carta não encontrada');},getVanLettersByUser:async()=>{return mockLetters;},generateVanLetterPDF:async()=>{return new Blob(['PDF simulado da carta VAN'],{type:'application/pdf'});}};","map":{"version":3,"names":["mockUser","id","name","email","mockToken","mockBanks","code","mockLetters","mockAuthService","login","password","localStorage","setItem","JSON","stringify","user","token","response","data","message","logout","removeItem","getCurrentUser","getItem","parse","isAuthenticated","mockBankService","getBanks","getBankById","find","bank","getBankProducts","description","mockVanService","createVanLetter","newLetter","_objectSpread","Date","now","toString","status","createdAt","toISOString","push","getVanLetterById","letter","updateVanLetter","letterIndex","findIndex","Error","getVanLettersByUser","generateVanLetterPDF","Blob","type"],"sources":["C:/Users/carlos.assuncao/tecno_react/src/services/mock.service.js"],"sourcesContent":["// Este arquivo simula as respostas do backend para testes do frontend\r\n\r\n// Mock do usuário autenticado\r\nconst mockUser = {\r\n  id: 1,\r\n  name: 'Usuário Teste',\r\n  email: 'teste@tecnospeed.com.br',\r\n};\r\n\r\n// Mock do token JWT\r\nconst mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\r\n\r\n// Mock de bancos\r\nconst mockBanks = [\r\n  { id: '001', code: '001', name: 'Banco do Brasil' },\r\n  { id: '341', code: '341', name: 'Itaú' },\r\n  { id: '033', code: '033', name: 'Santander' },\r\n  { id: '237', code: '237', name: 'Bradesco' },\r\n];\r\n\r\n// Mock das cartas VAN\r\nconst mockLetters = [];\r\n\r\n// Substitui as chamadas à API por funções mock\r\nexport const mockAuthService = {\r\n  login: async (email, password) => {\r\n    // Simula validação de credenciais\r\n    if (email === 'teste@tecnospeed.com.br' && password === '123456') {\r\n      localStorage.setItem('token', mockToken);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n      return { user: mockUser, token: mockToken };\r\n    } else {\r\n      throw { response: { data: { message: 'Credenciais inválidas' } } };\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n};\r\n\r\nexport const mockBankService = {\r\n  getBanks: async () => {\r\n    return mockBanks;\r\n  },\r\n  getBankById: async (id) => {\r\n    return mockBanks.find(bank => bank.id === id);\r\n  },\r\n  getBankProducts: async () => {\r\n    return [\r\n      {\r\n        id: 'boletos',\r\n        name: 'Boletos',\r\n        description: 'Trafegar arquivos de remessa e retorno de boletos',\r\n      },\r\n      {\r\n        id: 'pagamentos',\r\n        name: 'Pagamentos',\r\n        description: 'Trafegar arquivos de remessa e retorno de pagamentos',\r\n      },\r\n      {\r\n        id: 'extrato',\r\n        name: 'Extrato',\r\n        description: 'Trafegar arquivos de extrato',\r\n      },\r\n      {\r\n        id: 'dda',\r\n        name: 'DDA',\r\n        description: 'Trafegar arquivos de remessa de débitos',\r\n      },\r\n    ];\r\n  },\r\n};\r\n\r\nexport const mockVanService = {\r\n  createVanLetter: async (data) => {\r\n    const newLetter = {\r\n      id: Date.now().toString(),\r\n      ...data,\r\n      status: 'created',\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    mockLetters.push(newLetter);\r\n    return newLetter;\r\n  },\r\n  getVanLetterById: async (id) => {\r\n    return mockLetters.find(letter => letter.id === id);\r\n  },\r\n  updateVanLetter: async (id, data) => {\r\n    const letterIndex = mockLetters.findIndex(letter => letter.id === id);\r\n    if (letterIndex !== -1) {\r\n      mockLetters[letterIndex] = { ...mockLetters[letterIndex], ...data };\r\n      return mockLetters[letterIndex];\r\n    }\r\n    throw new Error('Carta não encontrada');\r\n  },\r\n  getVanLettersByUser: async () => {\r\n    return mockLetters;\r\n  },\r\n  generateVanLetterPDF: async () => {\r\n    return new Blob(['PDF simulado da carta VAN'], { type: 'application/pdf' });\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}